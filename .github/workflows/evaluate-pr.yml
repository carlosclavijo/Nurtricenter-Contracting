name: Evaluate pull request

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.101'

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarScanner for .NET
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner begin \
            /k:"carlosclavijo_Nurtricenter-Contracting" \
            /o:"carlosclavijo" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /v:"${{ github.sha }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
            /d:sonar.cs.vstest.reportsPaths="**/*.trx" \
            /d:sonar.exclusions="**/Migrations/**/*.cs"

      - name: Build solution
        run: dotnet build Contracting.sln --no-restore

      - name: Run tests with coverage
        run: |
          dotnet test Contracting.sln \
            --no-build \
            --collect:"XPlat Code Coverage" \
            --results-directory TestResults \
            --logger "trx;LogFileName=test-results.trx"

      - name: Copy coverage report
        run: |
          echo "Looking for coverage.opencover.xml..."
          COV=$(find . -name "coverage.opencover.xml" | head -n 1)
          if [ -z "$COV" ]; then
            echo "❌ coverage.opencover.xml not found"
            exit 1
          else
            echo "✅ Found: $COV"
            cp "$COV" ./coverage.opencover.xml
          fi

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
